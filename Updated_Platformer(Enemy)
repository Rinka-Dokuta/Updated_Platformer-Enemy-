import pygame
pygame.init()  
pygame.display.set_caption("easy platformer")  # sets the window title
screen = pygame.display.set_mode((800, 800))  # creates game screen
screen.fill((0,0,0))
clock = pygame.time.Clock() #set up clock
gameover = False #variable to run our game loop
Link = pygame.image.load('link.png') #load your spritesheet
Link.set_colorkey((255, 0, 255)) #this makes bright pink (255, 0, 255) transparent (sort of)




#CONSTANTS
LEFT=0
RIGHT=1
UP = 2
DOWN = 3
W=0
A = 1
D = 2



#player variables
xpos = 500 #xpos of player
ypos = 200 #ypos of player
vx = 0 #x velocity of player
vy = 0 #y velocity of player

xpos2 = 100 #xpos of player
ypos2 = 200 #ypos of player
vx2 = 0 #x velocity of player
vy2 = 0 #y velocity of player
keys = [False, False, False, False] #this list holds whether each key has been pressed
keys2 = [False, False, False, False]
isOnGround = False #this variable stops gravity from pulling you down more when on a platform
isOnGround2 = False
health = 100



#animation variables variables
frameWidth = 64
frameHeight = 96
RowNum = 0 #for left animation, this will need to change for other animations
frameNum = 0
ticker = 0


frameWidth = 64
frameHeight = 96
RowNum = 1 #for Right animation, this will need to change for other animations
frameNum = 0
ticker = 0

frameWidth = 64
frameHeight = 96
RowNum = 2 #for Up animation, this will need to change for other animations
frameNum = 0
ticker = 0


frameWidth = 64
frameHeight = 96
RowNum = 3 #for Down animation, this will need to change for other animations
frameNum = 0
ticker = 0

#enemies are held as a LIST. Lists have square brackets []
#you already know variables are storage boxes. Lists are storage boxes with slots in them!
enemy1 = [200, 630, 0] # each monster has a xpos, ypos, and ticker
enemy2 = [150, 730, 45]

def enemyMove(enemyInfo):
    #print(enemyInfo)
    enemyInfo[2]+=1
    if enemyInfo[2] <= 40:
        enemyInfo[0] += 1
    elif enemyInfo[2] <= 80:
        enemyInfo[0] -=1
    else:
        enemyInfo[2] = 0 #reset timer
        
def enemyMove2(enemyInfo):
    #print(enemyInfo)
    enemyInfo[2]+=1
    if enemyInfo[2] <= 80:
        enemyInfo[0] += 1
    elif enemyInfo[2] <= 160:
        enemyInfo[0] -=1
    else:
        enemyInfo[2] = 0 #reset timer
        
def enemyCollide(enemyInfo, playerX, playerY):
    if playerX+20>enemyInfo[0]: #right side of player, left side of enemy
        if playerX < enemyInfo[0]+20: #left sdie of player, right side of enemy
            if playerY < enemyInfo[1]+20: #top of the player, bottom of the enemy
                if playerY+20 > enemyInfo[1]:
                    return True
    else:
        return False

        
        

while not gameover and health > 0: #GAME LOOP############################################################
    clock.tick(60) #FPS
   
    #Input Section------------------------------------------------------------
    for event in pygame.event.get(): #quit game if x is pressed in top corner
        if event.type == pygame.QUIT:
            gameover = True
     
        if event.type == pygame.KEYDOWN: #keyboard input
            if event.key == pygame.K_LEFT:
                keys[LEFT]=True
            elif event.key == pygame.K_RIGHT:
                keys[RIGHT]=True
            elif event.key == pygame.K_UP:
                keys[UP]=True
            elif event.key == pygame.K_a:
                keys2[LEFT]=True
            elif event.key == pygame.K_d:
                keys2[RIGHT]=True
            elif event.key == pygame.K_w:
                keys2[UP]=True
       
        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                keys[LEFT]=False
            elif event.key == pygame.K_UP:
                keys[UP]=False
            elif event.key == pygame.K_RIGHT:
                keys[RIGHT]=False  
            elif event.key == pygame.K_a:
                keys2[LEFT]=False
            elif event.key == pygame.K_d:
                keys2[RIGHT]=False
            elif event.key == pygame.K_w:
                keys2[UP]=False
         
         
    #physics section--------------------------------------------------------------------
    #LEFT MOVEMENT
    if keys[LEFT]==True:
        vx=-3
       
   
    elif keys[RIGHT]==True:
        vx=+3
        
        
       
   

    #turn off velocity
    else:
        vx = 0
        #JUMPING
    if keys[UP] == True and isOnGround == True: #only jump when on the ground
        vy = -8
        isOnGround = False
        direction = UP
       
       
   #PLAYER 2=================================
    if keys2[LEFT]==True:
        vx2=-3
       
   
    elif keys2[RIGHT]==True:
        vx2=+3
       
   

    #turn off velocity
    else:
        vx2 = 0
        #JUMPING
    if keys2[UP] == True and isOnGround == True: #only jump when on the ground
        vy2 = -8
        isOnGround = False
        direction = UP
        
    enemyMove(enemy1)

        
    enemyMove2(enemy2)
    
     #check collision with enemies
    if enemyCollide(enemy1, xpos, ypos):
        print("hit")
        health  -=10
    if enemyCollide(enemy2, xpos, ypos):
        print("hit")
        health  -=10

        
   

   
    #COLLISION
    if xpos>100 and xpos<200 and ypos+40 >750 and ypos+40 <770:
        ypos = 750-40
        isOnGround = True
        vy = 0
    elif xpos>200 and xpos<300 and ypos+40 >650 and ypos+40 <670:
        ypos = 650-40
        isOnGround = True
        vy = 0
    elif xpos>300 and xpos<400 and ypos+40 >550 and ypos+40 <570:
        ypos = 550-40
        isOnGround = True
        vy = 0
    elif xpos>400 and xpos<500 and ypos+40 >450 and ypos+40 <470:
        ypos = 450-40
        isOnGround = True
        vy = 0
    elif xpos>500 and xpos<600 and ypos+40 >350 and ypos+40 <370:
        ypos = 350-40
        isOnGround = True
        vy = 0
    elif xpos>300 and xpos<400 and ypos+40 >250 and ypos+40 <270:
        ypos = 250-40
        isOnGround = True
        vy = 0
    elif xpos>200 and xpos<300 and ypos+40 >150 and ypos+40 <170:
        ypos = 150-40
        isOnGround = True
        vy = 0
       
    else:
        isOnGround = False


   
    #stop falling if on bottom of game screen
    if ypos > 760:
        isOnGround = True
        vy = 0
        ypos = 760
   
    #gravity
    if isOnGround == False:
        vy+=.2 #notice this grows over time, aka ACCELERATION
       
    #stop falling if on bottom of game screen
    if ypos2 > 760:
        isOnGround2 = True
        vy2 = 0
        ypos2 = 760
   
    #gravity
    if isOnGround2 == False:
        vy2+=.2 #notice this grows over time, aka ACCELERATION
   

    #update player position
    xpos+=vx
    ypos+=vy
   
    xpos2+=vx2
    ypos2+=vy2
   
 #ANIMATION-------------------------------------------------------------------
        
    # Update Animation Information
    # Only animate when in motion
    if vx < 0: #left animation
        # Ticker is a spedometer. We don't want Link animating as fast as the
        # processor can process! Update Animation Frame each time ticker goes over
        ticker+=1
        if ticker%10==0: #only change frames every 10 ticks
          frameNum+=1
           #If we are over the number of frames in our sprite, reset to 0.
           #In this particular case, there are 10 frames (0 through 9)
        if frameNum>7: 
           frameNum = 0
          
           
           
           
    # Update Animation Information
    # Only animate when in motion
    if vx > 0: #Right animation
        # Ticker is a spedometer. We don't want Link animating as fast as the
        # processor can process! Update Animation Frame each time ticker goes over
        ticker+=1
        if ticker%10==0: #only change frames every 10 ticks
          frameNum+=1
           #If we are over the number of frames in our sprite, reset to 0.
           #In this particular case, there are 10 frames (0 through 9)
        if frameNum>7: 
           frameNum = 0       
  
      # Update Animation Information
    # Only animate when in motion
    if vy < 0: #DOWN animation
        # Ticker is a spedometer. We don't want Link animating as fast as the
        # processor can process! Update Animation Frame each time ticker goes over
        ticker+=1
        if ticker%10==0: #only change frames every 10 ticks
          frameNum+=1
           #If we are over the number of frames in our sprite, reset to 0.
           #In this particular case, there are 10 frames (0 through 9)
        if frameNum>7: 
           frameNum = 0
           
    # Update Animation Information
    # Only animate when in motion
    if vy > 0: #UP animation
        # Ticker is a spedometer. We don't want Link animating as fast as the
        # processor can process! Update Animation Frame each time ticker goes over
        ticker+=1
        if ticker%10==0: #only change frames every 10 ticks
          frameNum+=1
           #If we are over the number of frames in our sprite, reset to 0.
           #In this particular case, there are 10 frames (0 through 9)
        if frameNum>7: 
           frameNum = 0
           
           
    # RENDER Section--------------------------------------------------------------------------------
           
    screen.fill((0,0,0)) #wipe screen so it doesn't smear
    screen.blit(Link, (xpos, ypos), (frameWidth*frameNum, RowNum*frameHeight, frameWidth, frameHeight)) 
 
    pygame.draw.rect(screen, (255, 204, 229), (xpos, ypos, 20, 40))
    pygame.draw.rect(screen, (204, 0, 102), (xpos2, ypos2, 20, 40))
   
   #draw enemy
    pygame.draw.rect(screen, (255,255,255), (enemy1[0], enemy1[1], 20, 20)) #access first and second slot of LIST
    pygame.draw.rect(screen, (255,255,255), (enemy2[0], enemy2[1], 20, 20))

  
   
   #first platform
    pygame.draw.rect(screen, (200, 0, 100), (100, 750, 100, 20))
   
    #second platform
    pygame.draw.rect(screen, (100, 0, 200), (200, 650, 100, 20))
   
   #thrid platform
    pygame.draw.rect(screen, (0, 255, 0), (300, 550, 100, 20))
   
   #forth platform
    pygame.draw.rect(screen, (0, 255, 0), (400, 450, 100, 20))
   
   #fifth platform
    pygame.draw.rect(screen, (0, 255, 0), (500, 350, 100, 20))
   
    #sixth platform
    pygame.draw.rect(screen, (0, 255, 0), (300, 250, 100, 20))
   
    #seventh platform
    pygame.draw.rect(screen, (0, 255, 0), (200, 150, 100, 20))
   
   
    pygame.display.flip()#this actually puts the pixel on the screen
   
   
#end game loop------------------------------------------------------------------------------
if health <=0:
    print("game over, you died")
pygame.quit()
